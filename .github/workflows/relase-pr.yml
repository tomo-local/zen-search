name: Release PR
on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "Version type (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install all dependencies
        run: |
          npm install semver fs

      - name: Create Release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const semver = require('semver');

            const versionType = '${{ inputs.versionType }}';

            const configPath = 'wxt.config.ts';
            const configContent = fs.readFileSync(configPath, 'utf8');
            const versionMatch = configContent.match(/version:\s*"([^"]+)"/);

            if (!versionMatch) {
              throw new Error('Version not found in wxt.config.ts');
            }

            const currentVersion = versionMatch[1];

            const newVersion = semver.inc(currentVersion, versionType);

            const branchName = `release/v${newVersion}`;

            const { data: ref } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/main`
            });

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: ref.object.sha
            });

            const updatedConfig = configContent.replace(
              /version:\s*"[^"]+"/,
              `version: "${newVersion}"`
            );

            // ファイルを更新
            const { data: configFile } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: configPath,
              ref: branchName,
              force: true
            });

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: configPath,
              message: `Bump version to ${newVersion}`,
              content: Buffer.from(updatedConfig).toString('base64'),
              sha: configFile.sha,
              branch: branchName
            });

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${newVersion}`,
              head: branchName,
              base: 'main',
              body: `v${newVersion}`,
              draft: false
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['release']
            });
