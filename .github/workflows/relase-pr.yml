name: Release PR
on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "Version type (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install semver

      - name: Create Release PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const semver = require('semver');

            const versionType = '${{ inputs.versionType }}';

            const configPath = 'wxt.config.ts';
            const configContent = fs.readFileSync(configPath, 'utf8');
            const versionMatch = configContent.match(/version:\s*"([^"]+)"/);

            if (!versionMatch) {
              throw new Error('Version not found in wxt.config.ts');
            }

            const currentVersion = versionMatch[1];
            const newVersion = semver.inc(currentVersion, versionType);
            const branchName = `release/v${newVersion}`;

            console.log(`🚀 ${currentVersion} → ${newVersion} でいくぞ！`);

            // mainブランチの最新取得
            const { data: ref } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/main`
            });

            // ブランチ作成（既存あっても強制更新）
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha
              });
              console.log(`🌿 ブランチ ${branchName} 新規作成！`);
            } catch (error) {
              if (error.status === 422) {
                // 既存ブランチを強制更新
                await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`,
                  sha: ref.object.sha,
                  force: true
                });
                console.log(`💪 既存ブランチを強制更新したぞ！`);
              } else {
                throw error;
              }
            }

            // wxt.config.ts更新
            const updatedConfig = configContent.replace(
              /version:\s*"[^"]+"/,
              `version: "${newVersion}"`
            );

            const { data: configFile } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: configPath,
              ref: branchName
            });

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: configPath,
              message: `Bump version to ${newVersion}`,
              content: Buffer.from(updatedConfig).toString('base64'),
              sha: configFile.sha,
              branch: branchName
            });

            console.log(`📝 ファイル更新完了！`);

            // 既存PR確認
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            if (existingPRs.length > 0) {
              // 既存PR更新
              const pr = existingPRs[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title: `Release v${newVersion}`,
                body: `v${newVersion}`
              });
              console.log(`🔄 既存PR #${pr.number} 更新したよ！`);
            } else {
              // 新しいPR作成
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release v${newVersion}`,
                head: branchName,
                base: 'main',
                body: `v${newVersion}`,
                draft: false
              });

              // releaseラベル追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['release']
              });

              console.log(`🎉 新しいPR #${pr.number} 作ったぞ！`);
            }

            console.log(`✅ 全部完了！お疲れさま〜 😄`);